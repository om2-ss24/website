---
title: Anaconda Environment
number-sections: true
---

The following setup provides a comprehensive approach for both Windows and Mac users to create a structured project directory, download necessary files, and set up an isolated Python environment for our project. 

By following these instructions, you will have a consistent and reproducible development environment, which is crucial for academic and professional projects.


## Creating the Project Structure

- For Windows Users: Open Command Prompt (you can do this by typing `cmd` in the Windows search bar and hitting Enter).

- For Mac Users: Open Terminal (you can find this in the Applications folder under Utilities, or use Spotlight by pressing Cmd + Space and typing "Terminal").


1. Create a new folder called `genai`:

```bash
mkdir genai
```

2. Navigate into the `genai` folder:

```bash
cd genai
```

3. Create a subfolder called `anaconda-env`:
   
```bash
mkdir anaconda-env
```

4. Navigate into the subfolder

```bash
cd anaconda-env
```


## Downloading the YAML File

We use `curl` to download the YAML file (I assume you are in the folder `anaconda-env`). This ensures the file is saved in the right place. You can check if you are in the right path as follows: 

- Mac: To print the current directory path in the Terminal, you can use the command `pwd` (print working directory) without any arguments. 

- Windows: To print the current directory path in the Windows Command Prompt, you can use the cd command without any arguments. Simply type: `cd`

Now use the `curl` command to download the `env-genai.yml` file:

```bash
curl -LJO https://raw.githubusercontent.com/kirenz/environments/main/ss2024/env-genai.yml
```

### Understanding `curl` and Its Parameters

After downloading the file, let's revisit what the `curl` command does:

- **`-L`**: Follows any redirects which the server might send as part of the request.
- **`-J`**: Uses the header-provided filename to save the file.
- **`-O`**: Saves the file locally with the same name as the filename on the server.

## Setting Up the Anaconda Environment

**Important Note:** Before proceeding with the creation of the Anaconda environment, ensure you are in the `anaconda-env` folder where the `env-genai.yml` file is located. This is crucial because the `conda` command looks for the YAML file in your current directory.

:::{.callout-tip collapse="true" title="Windows-User"}
Open Anaconda Command Prompt and navigate to the subfolder genai/anaconda-env:

```bash
cd ..\genai\anaconda-env
```
:::


:::{.callout-tip collapse="true" title="Mac-User"}
Open the Terminal or use the integrated Terminal in VS Code. Navigate to the subfolder data-collection:

```bash
cd ~/genai/anaconda-env
```
:::


Create the Anaconda Environment:


```bash
conda env create -f env-genai.yml
```
This command will create a new environment named `genai` and install all the dependencies listed in the YAML file.

**Activate the Environment:**

```bash
conda activate genai
```
Activating the environment will switch your current session to use the Python version and libraries specified in the environment.

### Understanding the YML-file in its Content

**YAML File**: YAML (YAML Ain't Markup Language) is a human-readable data serialization standard that can be used for configuration files and other forms of data that need to be stored and transmitted. In the context of Anaconda, a YAML file specifies the environment's name, the channels to install packages from, and the list of dependencies.

This Anaconda YAML file is used to create a specific environment named "genai" with a set of predefined packages and dependencies. Here's a breakdown of its components:

- **name**: Specifies the name of the environment, which is "genai" in this case.

- **channels**: Defines the sources where the packages will be downloaded from. It includes "conda-forge" and "defaults". Conda-forge is a community-led collection of recipes, build infrastructure, and distributions for the conda package manager.

- **dependencies**: Lists the packages and versions that will be installed in the environment:
  - **python=3.11**: Installs Python version 3.11.
  - **pip**: Ensures that pip, the Python package installer, is available in the environment.
  - **pip:**: Under this entry, it specifies additional Python packages to be installed via pip:
    - **pandas**: A library providing high-performance, easy-to-use data structures and data analysis tools.
    - **streamlit**: A tool for creating and sharing custom web apps for machine learning and data science.
    - **openai**: Provides access to the APIs of OpenAI, including capabilities like GPT models.
    - **streamlit-feedback**: An extension for Streamlit to gather user feedback within Streamlit apps.
    - **python-dotenv**: A dependency that allows your application to load environment variables from a `.env` file which is useful for managing app settings during development and in production.

This YAML file helps in managing the environment setup by ensuring that all necessary dependencies are installed using Conda and pip, thereby standardizing the environment setup and facilitating reproducibility across different machines and setups.